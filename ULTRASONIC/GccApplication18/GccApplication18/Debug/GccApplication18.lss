
GccApplication18.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000002f0  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  0080011a  0080011a  0000039e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f09  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a8  00000000  00000000  000013ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bc  00000000  00000000  00001d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ba  00000000  00000000  0000238c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009cd  00000000  00000000  00002946  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003313  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ef       	ldi	r30, 0xF0	; 240
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e1       	ldi	r26, 0x1A	; 26
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 36       	cpi	r26, 0x6B	; 107
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bd d0       	rcall	.+378    	; 0x23e <main>
  c4:	13 c1       	rjmp	.+550    	; 0x2ec <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_usart>:
		integer += ((character_array[1]-0x30)*100);
		integer += ((character_array[2]-0x30)*10);
		integer += (character_array[3]-0x30);
	}
	return integer;
}
  c8:	1b b8       	out	0x0b, r1	; 11
  ca:	28 e9       	ldi	r18, 0x98	; 152
  cc:	2a b9       	out	0x0a, r18	; 10
  ce:	26 e8       	ldi	r18, 0x86	; 134
  d0:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  d4:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  d8:	89 b9       	out	0x09, r24	; 9
  da:	08 95       	ret

000000dc <usart_putchar>:
  dc:	5d 9b       	sbis	0x0b, 5	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <usart_putchar>
  e0:	8c b9       	out	0x0c, r24	; 12
  e2:	08 95       	ret

000000e4 <send2uart>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	29 f0       	breq	.+10     	; 0xfa <send2uart+0x16>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	f4 df       	rcall	.-24     	; 0xdc <usart_putchar>
  f4:	89 91       	ld	r24, Y+
  f6:	81 11       	cpse	r24, r1
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <send2uart+0xe>
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <print_uart>:
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	ec 01       	movw	r28, r24
 106:	88 81       	ld	r24, Y
 108:	88 23       	and	r24, r24
 10a:	29 f0       	breq	.+10     	; 0x116 <print_uart+0x16>
 10c:	21 96       	adiw	r28, 0x01	; 1
 10e:	e6 df       	rcall	.-52     	; 0xdc <usart_putchar>
 110:	89 91       	ld	r24, Y+
 112:	81 11       	cpse	r24, r1
 114:	fc cf       	rjmp	.-8      	; 0x10e <print_uart+0xe>
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	e1 df       	rcall	.-62     	; 0xdc <usart_putchar>
 11a:	8a e0       	ldi	r24, 0x0A	; 10
 11c:	df df       	rcall	.-66     	; 0xdc <usart_putchar>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <integer_to_char>:
 124:	fb 01       	movw	r30, r22
 126:	42 30       	cpi	r20, 0x02	; 2
 128:	49 f4       	brne	.+18     	; 0x13c <integer_to_char+0x18>
 12a:	6a e0       	ldi	r22, 0x0A	; 10
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	a8 d0       	rcall	.+336    	; 0x280 <__divmodhi4>
 130:	60 5d       	subi	r22, 0xD0	; 208
 132:	60 83       	st	Z, r22
 134:	80 5d       	subi	r24, 0xD0	; 208
 136:	81 83       	std	Z+1, r24	; 0x01
 138:	12 82       	std	Z+2, r1	; 0x02
 13a:	08 95       	ret
 13c:	43 30       	cpi	r20, 0x03	; 3
 13e:	71 f4       	brne	.+28     	; 0x15c <integer_to_char+0x38>
 140:	64 e6       	ldi	r22, 0x64	; 100
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	9d d0       	rcall	.+314    	; 0x280 <__divmodhi4>
 146:	60 5d       	subi	r22, 0xD0	; 208
 148:	60 83       	st	Z, r22
 14a:	6a e0       	ldi	r22, 0x0A	; 10
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	98 d0       	rcall	.+304    	; 0x280 <__divmodhi4>
 150:	60 5d       	subi	r22, 0xD0	; 208
 152:	61 83       	std	Z+1, r22	; 0x01
 154:	80 5d       	subi	r24, 0xD0	; 208
 156:	82 83       	std	Z+2, r24	; 0x02
 158:	13 82       	std	Z+3, r1	; 0x03
 15a:	08 95       	ret
 15c:	44 30       	cpi	r20, 0x04	; 4
 15e:	91 f4       	brne	.+36     	; 0x184 <integer_to_char+0x60>
 160:	68 ee       	ldi	r22, 0xE8	; 232
 162:	73 e0       	ldi	r23, 0x03	; 3
 164:	8d d0       	rcall	.+282    	; 0x280 <__divmodhi4>
 166:	60 5d       	subi	r22, 0xD0	; 208
 168:	60 83       	st	Z, r22
 16a:	64 e6       	ldi	r22, 0x64	; 100
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	88 d0       	rcall	.+272    	; 0x280 <__divmodhi4>
 170:	60 5d       	subi	r22, 0xD0	; 208
 172:	61 83       	std	Z+1, r22	; 0x01
 174:	6a e0       	ldi	r22, 0x0A	; 10
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	83 d0       	rcall	.+262    	; 0x280 <__divmodhi4>
 17a:	60 5d       	subi	r22, 0xD0	; 208
 17c:	62 83       	std	Z+2, r22	; 0x02
 17e:	80 5d       	subi	r24, 0xD0	; 208
 180:	83 83       	std	Z+3, r24	; 0x03
 182:	14 82       	std	Z+4, r1	; 0x04
 184:	08 95       	ret

00000186 <init_Ultrasonic_sensor>:
unsigned int get_distance_Ultrasonic_sensor(void);
unsigned int echo_duration;

void init_Ultrasonic_sensor(void)
{
	Ultrasonic_Triger_Port_Direction |= (Ultrasonic_Trigger_pin);    // Ultrasonic Trigger pin
 186:	b8 9a       	sbi	0x17, 0	; 23
	Ultrasonic_Triger_Port &= ~(Ultrasonic_Trigger_pin);   // Ultrasonic pin set to low
 188:	c0 98       	cbi	0x18, 0	; 24
	
	Ultrasonic_Echo_Port_Direction &= ~(Ultrasonic_Echo_pin);   // Ultrasonic Echo pin set to input
 18a:	b9 98       	cbi	0x17, 1	; 23
	Ultrasonic_Echo_Port |= Ultrasonic_Echo_pin;      // Enable pullup
 18c:	c1 9a       	sbi	0x18, 1	; 24
 18e:	08 95       	ret

00000190 <trigger_Ultrasonic_sensor>:
}

void trigger_Ultrasonic_sensor(void)
{
	Ultrasonic_Triger_Port &= ~(Ultrasonic_Trigger_pin);
 190:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	00 c0       	rjmp	.+0      	; 0x194 <trigger_Ultrasonic_sensor+0x4>
	_delay_us(2);
	Ultrasonic_Triger_Port |= (Ultrasonic_Trigger_pin);
 194:	c0 9a       	sbi	0x18, 0	; 24
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <trigger_Ultrasonic_sensor+0x8>
 19c:	00 00       	nop
	_delay_us(10);
	Ultrasonic_Triger_Port &= ~(Ultrasonic_Trigger_pin);
 19e:	c0 98       	cbi	0x18, 0	; 24
 1a0:	08 95       	ret

000001a2 <read_Ultrasonic_sensor>:
}

unsigned int read_Ultrasonic_sensor(void)
{
	echo_duration = 0;
 1a2:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <echo_duration+0x1>
 1a6:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <echo_duration>
	while((Ultrasonic_Echo_Input&Ultrasonic_Echo_pin) != Ultrasonic_Echo_pin);
 1aa:	b1 9b       	sbis	0x16, 1	; 22
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <read_Ultrasonic_sensor+0x8>
	while(((Ultrasonic_Echo_Input&Ultrasonic_Echo_pin) == Ultrasonic_Echo_pin) && (echo_duration<20000))
 1ae:	b1 9b       	sbis	0x16, 1	; 22
 1b0:	0f c0       	rjmp	.+30     	; 0x1d0 <read_Ultrasonic_sensor+0x2e>
 1b2:	00 00       	nop
	{
		_delay_us(1);
		echo_duration++;
 1b4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <echo_duration>
 1b8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <echo_duration+0x1>
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <echo_duration+0x1>
 1c2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <echo_duration>

unsigned int read_Ultrasonic_sensor(void)
{
	echo_duration = 0;
	while((Ultrasonic_Echo_Input&Ultrasonic_Echo_pin) != Ultrasonic_Echo_pin);
	while(((Ultrasonic_Echo_Input&Ultrasonic_Echo_pin) == Ultrasonic_Echo_pin) && (echo_duration<20000))
 1c6:	b1 9b       	sbis	0x16, 1	; 22
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <read_Ultrasonic_sensor+0x2e>
 1ca:	80 32       	cpi	r24, 0x20	; 32
 1cc:	9e 44       	sbci	r25, 0x4E	; 78
 1ce:	88 f3       	brcs	.-30     	; 0x1b2 <read_Ultrasonic_sensor+0x10>
	{
		_delay_us(1);
		echo_duration++;
	}
	return echo_duration;
}
 1d0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <echo_duration>
 1d4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <echo_duration+0x1>
 1d8:	08 95       	ret

000001da <get_distance_Ultrasonic_sensor>:


unsigned int get_distance_Ultrasonic_sensor(void)
{
	trigger_Ultrasonic_sensor();
 1da:	da df       	rcall	.-76     	; 0x190 <trigger_Ultrasonic_sensor>
	return read_Ultrasonic_sensor()/SCALE_FACTOR;
 1dc:	e2 df       	rcall	.-60     	; 0x1a2 <read_Ultrasonic_sensor>
 1de:	9c 01       	movw	r18, r24
 1e0:	ab ea       	ldi	r26, 0xAB	; 171
 1e2:	ba ea       	ldi	r27, 0xAA	; 170
 1e4:	60 d0       	rcall	.+192    	; 0x2a6 <__umulhisi3>
 1e6:	96 95       	lsr	r25
}
 1e8:	87 95       	ror	r24
 1ea:	08 95       	ret

000001ec <convert_cm>:
 1ec:	6a e0       	ldi	r22, 0x0A	; 10

int distance = 0,c_m=0,m_m=0;

int convert_cm(int value)
{
 c_m = value/10;
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	47 d0       	rcall	.+142    	; 0x280 <__divmodhi4>
 1f2:	cb 01       	movw	r24, r22
 1f4:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <__data_end+0x1>
 1f8:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <__data_end>



  integer_to_char(c_m,data_buffer,3);
 1fc:	43 e0       	ldi	r20, 0x03	; 3
 1fe:	67 e6       	ldi	r22, 0x67	; 103
 200:	71 e0       	ldi	r23, 0x01	; 1
 202:	90 df       	rcall	.-224    	; 0x124 <integer_to_char>
  send2uart(data_buffer);
 204:	87 e6       	ldi	r24, 0x67	; 103
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	6d df       	rcall	.-294    	; 0xe4 <send2uart>
  send2uart("cm");
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	6a df       	rcall	.-300    	; 0xe4 <send2uart>
  usart_putchar(0x0D);
 210:	8d e0       	ldi	r24, 0x0D	; 13
 212:	64 df       	rcall	.-312    	; 0xdc <usart_putchar>
 214:	8a e0       	ldi	r24, 0x0A	; 10
  usart_putchar(0x0A);
 216:	62 df       	rcall	.-316    	; 0xdc <usart_putchar>
 218:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
  if(c_m<015)
 21c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 220:	0d 97       	sbiw	r24, 0x0d	; 13
 222:	64 f4       	brge	.+24     	; 0x23c <convert_cm+0x50>
 224:	83 e1       	ldi	r24, 0x13	; 19
 226:	e3 e0       	ldi	r30, 0x03	; 3
  {
    sprintf(buffer,"OBSTACLE DETECTED\n");
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	a4 e3       	ldi	r26, 0x34	; 52
 22c:	b1 e0       	ldi	r27, 0x01	; 1
 22e:	01 90       	ld	r0, Z+
 230:	0d 92       	st	X+, r0
 232:	8a 95       	dec	r24
 234:	e1 f7       	brne	.-8      	; 0x22e <convert_cm+0x42>
 236:	84 e3       	ldi	r24, 0x34	; 52
	send2uart(buffer);
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	54 cf       	rjmp	.-344    	; 0xe4 <send2uart>
 23c:	08 95       	ret

0000023e <main>:
 23e:	2f e3       	ldi	r18, 0x3F	; 63
   }
}
 240:	8d e0       	ldi	r24, 0x0D	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	93 e0       	ldi	r25, 0x03	; 3
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x6>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x10>
 24e:	00 00       	nop

int main(void)
{

_delay_ms(1000);
print_uart("OK");
 250:	86 e1       	ldi	r24, 0x16	; 22
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	55 df       	rcall	.-342    	; 0x100 <print_uart>


DDRD&=~(BIT3);
 256:	8b 98       	cbi	0x11, 3	; 17
PORTD |= BIT3;

init_Ultrasonic_sensor();
 258:	93 9a       	sbi	0x12, 3	; 18
 25a:	95 df       	rcall	.-214    	; 0x186 <init_Ultrasonic_sensor>

if((PIND&BIT3) == BIT3)
 25c:	83 9b       	sbis	0x10, 3	; 16
 25e:	03 c0       	rjmp	.+6      	; 0x266 <main+0x28>
{
init_usart(BAUD_9600);
 260:	83 e3       	ldi	r24, 0x33	; 51
 262:	90 e0       	ldi	r25, 0x00	; 0
//init_usart(BAUD_57600);
}

while(1)
{
	distance = get_distance_Ultrasonic_sensor();
 264:	31 df       	rcall	.-414    	; 0xc8 <init_usart>
 266:	b9 df       	rcall	.-142    	; 0x1da <get_distance_Ultrasonic_sensor>
 268:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <distance+0x1>
 26c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <distance>
	convert_cm(distance);
 270:	bd df       	rcall	.-134    	; 0x1ec <convert_cm>
 272:	87 ea       	ldi	r24, 0xA7	; 167
 274:	91 e6       	ldi	r25, 0x61	; 97
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <main+0x38>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x3e>
 27c:	00 00       	nop
 27e:	f3 cf       	rjmp	.-26     	; 0x266 <main+0x28>

00000280 <__divmodhi4>:
 280:	97 fb       	bst	r25, 7
 282:	07 2e       	mov	r0, r23
 284:	16 f4       	brtc	.+4      	; 0x28a <__divmodhi4+0xa>
 286:	00 94       	com	r0
 288:	06 d0       	rcall	.+12     	; 0x296 <__divmodhi4_neg1>
 28a:	77 fd       	sbrc	r23, 7
 28c:	08 d0       	rcall	.+16     	; 0x29e <__divmodhi4_neg2>
 28e:	1a d0       	rcall	.+52     	; 0x2c4 <__udivmodhi4>
 290:	07 fc       	sbrc	r0, 7
 292:	05 d0       	rcall	.+10     	; 0x29e <__divmodhi4_neg2>
 294:	3e f4       	brtc	.+14     	; 0x2a4 <__divmodhi4_exit>

00000296 <__divmodhi4_neg1>:
 296:	90 95       	com	r25
 298:	81 95       	neg	r24
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	08 95       	ret

0000029e <__divmodhi4_neg2>:
 29e:	70 95       	com	r23
 2a0:	61 95       	neg	r22
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255

000002a4 <__divmodhi4_exit>:
 2a4:	08 95       	ret

000002a6 <__umulhisi3>:
 2a6:	a2 9f       	mul	r26, r18
 2a8:	b0 01       	movw	r22, r0
 2aa:	b3 9f       	mul	r27, r19
 2ac:	c0 01       	movw	r24, r0
 2ae:	a3 9f       	mul	r26, r19
 2b0:	70 0d       	add	r23, r0
 2b2:	81 1d       	adc	r24, r1
 2b4:	11 24       	eor	r1, r1
 2b6:	91 1d       	adc	r25, r1
 2b8:	b2 9f       	mul	r27, r18
 2ba:	70 0d       	add	r23, r0
 2bc:	81 1d       	adc	r24, r1
 2be:	11 24       	eor	r1, r1
 2c0:	91 1d       	adc	r25, r1
 2c2:	08 95       	ret

000002c4 <__udivmodhi4>:
 2c4:	aa 1b       	sub	r26, r26
 2c6:	bb 1b       	sub	r27, r27
 2c8:	51 e1       	ldi	r21, 0x11	; 17
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <__udivmodhi4_ep>

000002cc <__udivmodhi4_loop>:
 2cc:	aa 1f       	adc	r26, r26
 2ce:	bb 1f       	adc	r27, r27
 2d0:	a6 17       	cp	r26, r22
 2d2:	b7 07       	cpc	r27, r23
 2d4:	10 f0       	brcs	.+4      	; 0x2da <__udivmodhi4_ep>
 2d6:	a6 1b       	sub	r26, r22
 2d8:	b7 0b       	sbc	r27, r23

000002da <__udivmodhi4_ep>:
 2da:	88 1f       	adc	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	5a 95       	dec	r21
 2e0:	a9 f7       	brne	.-22     	; 0x2cc <__udivmodhi4_loop>
 2e2:	80 95       	com	r24
 2e4:	90 95       	com	r25
 2e6:	bc 01       	movw	r22, r24
 2e8:	cd 01       	movw	r24, r26
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
